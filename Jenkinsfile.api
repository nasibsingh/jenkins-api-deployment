import groovy.json.JsonOutput

def COLOR_MAP = [
    'SUCCESS': 'good',
    'ALERT': 'warning',
    'FAILURE': 'danger'
    ]
    
def getBuildUser(){
    return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
}

pipeline {
    agent any
    environment {
    ACCOUNT_ID = ''
    BUILD_USER = ''
    
    }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'BRANCH', type: 'PT_BRANCH'
    }
    stages {
        // stage('slack') {
        //     steps {
        //         script{
        //           BUILD_USER = getBuildUser()
        //         }
        //         slackSend channel: 'channel_name',
        //                 color: 'warning',
        //               message: 'Project_name Api Build Initiated'
        //     }
        // }
        stage('Initialise'){
            steps{
                git branch: "${params.BRANCH}", credentialsId: 'credential_name', url: ''
            }
        }
        stage('Build'){
            steps{
                input(message: 'Do you want to build the image?', ok: 'Build Image')
                script{
                    //delete old .pem files
                    // sh 'rm -rf *.pem'
                    //create 'pem' files
                    sh '''
                    aws secretsmanager get-secret-value --secret-id /project_name/environment/jwt-private --query SecretString --output text > jwt-private.pem
                    '''
                    sh '''
                    aws secretsmanager get-secret-value --secret-id /project_name/environment/jwt-public --query SecretString --output text > jwt-public.pem
                    '''
                    //create 'firebase-adminsdk.json' files
                    // sh '''
                    // aws secretsmanager get-secret-value --secret-id /project_name/environment/firebase-adminsdk --query SecretString --output text --region region > firebase-adminsdk.json
                    // '''
                    //env from secrets manager
                    sh '''
                    aws secretsmanager get-secret-value --secret-id project_name/environment/env --query SecretString --output text --region region | jq -r 'to_entries|map("\\(.key)=\\(.value)")|.[]' > .env
                    '''
                    //Build image
                    sh '''
                    cd /var/lib/jenkins/workspace/$JOB_NAME
                    docker build -t project-name-environment:$BUILD_NUMBER .
                    '''
                }
            }
        }
        stage('Publish') {
            steps {
                input(message: 'Do you want to Publish the image to ECR?', ok: 'Publish image')
                script {
                //Login to AWS ECR
                sh 'aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.region.amazonaws.com'
                //Push image to ECR
                sh 'docker tag project-name-environment:$BUILD_NUMBER $ACCOUNT_ID.dkr.ecr.region.amazonaws.com/project-name-environment:$BUILD_NUMBER'
                sh 'docker push $ACCOUNT_ID.dkr.ecr.region.amazonaws.com/project-name-environment:$BUILD_NUMBER'
                }
            }
        }
        stage('Create revision') {
            steps{
                input(message: 'Do you want to deploy the image?', ok: 'Deploy')
                //create revision
                script {
                    sh '''
                        cluster="cluster-name"
                        service_name="service-name"
                        TASK="task-definition-name"
                        ECR_IMAGE="$ACCOUNT_ID.dkr.ecr.region.amazonaws.com/project-name-environment:$BUILD_NUMBER"
                    
                        TASK_DEFINITION=$(aws ecs describe-task-definition  --task-definition project-name-environment --region region --output json)
                        updated_task_definition=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                    
                        task_revision=$(aws ecs register-task-definition --region region --cli-input-json "$updated_task_definition")
                        task_revision_data=$(echo $task_revision | jq '.taskDefinition.revision')
                    
                        NEW_SERVICE=$(aws ecs update-service --cluster $cluster --service $service_name --task-definition $TASK --force-new-deployment)
                        echo "${TASK}, Revision: ${task_revision_data}"
                        
                        aws ecs wait services-stable --cluster $cluster --services $service_name
                    '''
                }
            }
        }
    }
    // post{
    //     always{
    //         script{
    //             BUILD_USER = getBuildUser()
    //             }
    //         slackSend channel: 'channel_name',
    //                   color: COLOR_MAP[currentBuild.currentResult],
    //                   message: "*${currentBuild.currentResult}:* Project_name Environment Build ${env.BUILD_NUMBER} By ${BUILD_USER}"
    //     }
    // }
}
